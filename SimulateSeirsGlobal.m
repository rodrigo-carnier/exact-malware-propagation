clear all;

%% Initialize parameters and objects

initParam;
param.malware = 'SEIRS';

% Initialize matrix of states: initGlobalXXX creates and populates a matrix
% with the states of every device in the network. Meaning of each line in
% the matrix:
% 
% (1,i) Address of device. The address is a decimal number from 1 to n.
% (2,i) Powered or not (not in use). 0 - device is turned off. 1 - device is turned on. -1 - device is turned off but will be reset next turn.
% (3,i) State of device. S: 1    E: 10    I: 100    R: 1000    D: 10000
% (4,i) Infection Delay. A countdown for every device that moved from S to E.
% (5,i) Recovery Delay. A countdown for every device that moved from I to R.
%
% Infection delay: when a device moves from S to E, (3,i) is set to omega, then a countdown starts decresing every turn to 0. Then the device moves from E to I.
% Recovery delay: when a device moves from I to R, (4,i) is set to tau, then a countdown starts decresing every turn to 0. Then the device moves from R to S.

switch param.malware
    case 'SIS'
        inits.InitSisGlobal;
    case 'SIQ'
        inits.InitSiqGlobal;
    case 'SEIRS'
        inits.InitSeirsGlobal;
end


% Initialize reports:
% The matrix below is a report generated every turn about the situation of
% the network in terms of infection, device on or off.
% Every line represents a turn. The meaning of each column is:

% (:,1) Turn
% (:,2) How many devices are S
% (:,3) How many devices are E
% (:,4) How many devices are I
% (:,5) How many devices are R
% (:,6) How many devices are D

report = zeros(1,8);
report = metrics.MakeReportsSeirs(report, network, param, 0);

 
%% Simulation

cleaned = zeros(1, param.max_turns);
reset = zeros(1, param.max_turns);
tic;
turn = 0


%%% SIMULATION LOGIC
%%% 
%%% 1) Since the simulation is sequential, we have to take care to avoid
%%% chain infections: a device infected this turn will effectively become
%%% an infectious device only next turn, else he may have a chance of
%%% infecting other devices this turn (chain infection).
%%% 2) To prevent this, we generate copies of "network" as an output of every
%%% process (there are 2 in this simulation: infection and cleaning).
%%% 3) After these two copies ("network_k1_infected" and "network_k1_cleaned")
%%% are generated, they are merged by the function MergeTransitionsSIS

while turn < param.max_turns
    turn = turn+1
% while (report(end,3)>0 || report(end,4)> report(end,5)) && turn < param.max_turns
    
%%% Update counter for delayed states E and R
    network_k1_decremented = delaydyn.DecrementDelayedStates(network, param);
    
%%% Infection phase. Every infected device tries to infect only one device according to Chance of Infection (alpha)
    network_k1_infected = infecmodels.AttackSeirsRandom(network, param);
%     report_turn.newInfections(turn) = newInf;
    
%%% Mitigate malware in devices according to Chance of Detection (beta)
    [network_k1_cleaned, cleaned] = mitigmodels.CleanSeirsGlobal(network, param);

%     report_turn.cleanings(turn) = cleaned_devs;
%     report_turn.resets(turn) = reset_devs;
%     report_turn.false_neg(turn) = FN;
%     report_turn.false_neg_M(turn) = FN_M;
%     report_turn.false_pos(turn) = FP;
%     network = network_k1_cleaned;
    
%%% Merge network of transitions into the original matrix "network"
    network = simultools.MergeTransitionsSeirs(network, network_k1_decremented, network_k1_infected, network_k1_cleaned, param);

%%% Make a report of this turn
    report = metrics.MakeReportsSeirs(report, network, param, turn);

end

%% Reports and printing results into figures

report = metrics.MakeReportsSeirs(report, network, param, turn);

comp_time = toc
% cleaned
% reset

nameParam = strcat(strcat('seirs_simul_a',num2str(param.alpha*100),'_b',num2str(param.beta*100)));
savename = strcat(nameParam,'.mat');
save(savename);

f = figure(150);
plot(report(1:turn,1),report(1:turn,2)/param.n, 'blue', 'LineWidth', 2);
hold on;
plot(report(1:turn,1),report(1:turn,3)/param.n, '-.', 'color',[1 0.5 0], 'LineWidth', 2)
plot(report(1:turn,1),report(1:turn,4)/param.n, 'red--', 'LineWidth', 2)
plot(report(1:turn,1),report(1:turn,5)/param.n, ':', 'color',[0 0.5 0], 'LineWidth', 2)        
plot(report(1:turn,1),report(1:turn,6)/param.n, 'black', 'LineWidth', 2)        
hold off;
ytickformat('percentage');
xlabel('Turn');
ylabel('Percentage of Total Devices');
% axis([0 1 0 1]);
axis([0 param.max_turns 0 100]);
legend('Susceptible','Exposed', 'Infected', 'Recovered', 'Dead');
%         title(strcat('SEIRS simulation (all populations), \alpha=', num2str(param.alpha)));
xlabel('Turn');
ylabel('Percentage of Total Devices');
exportgraphics(f,strcat('seirs_simul_a', num2str(param.alpha*100),'_b',num2str(param.beta*100),'.png'), 'Resolution', 600);
clearvars f;
