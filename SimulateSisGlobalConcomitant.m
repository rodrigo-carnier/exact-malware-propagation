
%% Initialize reports

% The matrix below is a report generated every turn about the situation of
% the network in terms of infection, device on or off.
% Every line represents a turn. The meaning of each column is:

% (:,1) Turn
% (:,2) How many devices are clean
% (:,3) How many devices have MSM infection
% (:,4) How many devices have ACM infection
% (:,5) How many devices have ACM infection neutralized
% (:,6) How many devices are on
% (:,7) How many devices are off
% (:,8) How many devices are resetting

report_total = zeros(1,8);
report_total = MakeReports(report_total, network, param, 0);

 
%% Simulation

report_normal = [];
report_infected = [];
turn = param.scanDelay;
tic;
t = 1;
while (report_total(end,3)>0 || report_total(end,4)> report_total(end,5)) && t < param.max_turns
    
%     t
    
    % Since the simulation is sequential, we have to take care to avoid
    % chain infections: before, in a single loop of "for t=1:turns",
    % device(i) could infect device(i+j) in turn i, then device(i+j) could
    % infect device(i+j+k) in turn (i+j). To prevent this, now we copy
    % "network" into "network_update", infect new devices only on 
    % "network_update" during the loop of "for sender_add=1:param.n', then after
    % this loop ends, copy "network_update" back into "network". Now if
    % device(i+j) is infected in turn i, it will not infect anyone in turn
    % (i+j). Only in the next iteration of "for t=1:turns".
    network_k1 = network;
    
    % Simulate a turn of communications in the IoT network
    for sender_add=1:param.n
        
        if (network(2,sender_add) == 1)                                      % If sender device is turned on, send message
            
            if (network(3, sender_add) == 1)||(network(4, sender_add) == 1)  % If sender device is infected, choose a clean (and turned on) receiver device to infect
                receiver_add = GetReceiverGlobalClean(sender_add, network, param);
                % The function below does a lot of things. Check inside.
                [network_k1, report_normal, report_infected] = AttemptInfection(network, network_k1, report_normal, report_infected, sender_add, receiver_add, param);
            end

        end
        
    end
  
  
% 	% Mitigate malware in devices according to Detection Rate (DR)
%     turn  = turn - 1;
%     if turn == 0
%         turn = param.scanDelay;
%         [network, report_RAM_infec, report_ROM_infec] = CleanSisGlobal(network, param);
%     end

    network_k1 = ResetDevices(network, param);
    
    [network_k1, report_RAM_infec, report_ROM_infec] = CleanSisPercentage(network, param);
    
    network = network_k1;

    % Reset devices that were set for resetting last turn

    
    
    % Make a report of this turn
    report_total = MakeReports(report_total, network, param, t);
    
    t = t + 1;
end

report_total = MakeReports(report_total, network, param, t);

comp_time = toc;

% switch param.malware
%     case 'MSM'
%         Plot_MSM;
%     case 'ACM'
%         Plot_ACM;
% end