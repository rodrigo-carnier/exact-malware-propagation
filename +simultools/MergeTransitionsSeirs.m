function network = MergeTransitionsSeirs(network0, network_decrements, network_infected, network_cleaned, param)

% (3,i) State of device. S: 1    E: 10    I: 100    R: 1000    D: 10000

% Final "network" matrix starts as a copy of network_decrements, since this
% contains the most changes and the independent ones (the decrements)
network = network_decrements;

% Transplant new infections (Exposed or straight Infected [omega=0]) from
% network_infected to network. Find out new infections by comparing
% network_infected with network0 (the initial network before decrements!)
if param.omega > 0
    % Find index of new infections
    newInfecIndexes = find((network_infected(3,:)-network0(3,:))==9);
    
    % Then we update network with new infections using indexes
    for i=1:length(newInfecIndexes)
        network(3,newInfecIndexes(i)) = 10;
        network(4,newInfecIndexes(i)) = param.omega;
    end
    
else
    newInfecIndexes = find((network_infected(3,:)-network0(3,:))==99);
    
    % Then we update network with new infections using indexes
    for i=1:length(newInfecIndexes)
        network(3,newInfecIndexes(i)) = 100;
    end
end


% Transplant new cleanings (Recovered or straight Susceptible [tau=0]) from
% network_cleaned to network. Find out new cleanings by comparing
% network_cleaned with network0 (the initial network before decrements!)
if param.tau > 0
    % Find index of new cleanings
    newCleanIndexes = find((network_cleaned(3,:)-network0(3,:))==900);
    
    % Then we update network with new cleanings using indexes
    for i=1:length(newCleanIndexes)
        network(3,newCleanIndexes(i)) = 1000;
        network(5,newCleanIndexes(i)) = param.tau;
    end
    
else
    newCleanIndexes = find((network_cleaned(3,:)-network0(3,:))==-99);
    
    % Then we update network with new cleanings using indexes
    for i=1:length(newCleanIndexes)
        network(3,newCleanIndexes(i)) = 1;
    end
end


end