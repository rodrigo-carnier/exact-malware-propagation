% PURPOSE OF THIS FUNCTION

function [network_k1] = AttackSisOnlyCleanBijector(network, network_k1, param)
  
% Get Vector of Infected Devices
[addressInfected, numberInfected] = simultools.GetSenderGlobalInfected(network, param.malware);

% Get Vector of Clean Devices
[addressCleanSorted, numberClean] = simultools.GetReceiverGlobalClean(network, param.malware);

%% Li-san idea without while loop

% if numberInfected < numberClean
%     N = numberInfected;
%     
%     for i=1:N
% 
%         sender_add = addressInfected(i);
%         receiver_add = addressCleanSorted(i);
% 
%         if network(2, receiver_add) == 1    % If the receiver device is turned on, proceed to threat infection
% 
%             switch network(3, sender_add)
% 
%                 case 0
%                     % The sender is not RAM infected. Do nothing.
% 
%                 case 1
%                     % The sender is RAM infected. Test Infection Rate, if success, then
%                     % infect receiver's RAM.
%                     if rand(1)<=param.IR
%                         network_k1(3, receiver_add) = 1;
%                     end
% 
%             end
% 
%             switch network(4, sender_add)
% 
%                 case 0
%                     % The sender is not ROM infected. Do nothing.
% 
%                 case 1
%                     % The sender is ROM infected. Test Infection Rate, if success, then
%                     % infect receiver's ROM.
%                     if rand(1)<=param.IR
%                         network_k1(4, receiver_add) = 1;
%                     end
% 
%             end
% 
%         end
% 
%     end
% 
% else
%     N = numberClean;
%     K = numberInfected - numberClean;
%     
%     for i=1:K
% 
%         sender_add = addressInfected(N+K);
%         receiver_add = addressCleanSorted(K);
% 
%         if network(2, receiver_add) == 1    % If the receiver device is turned on, proceed to threat infection
% 
%             switch network(3, sender_add)
% 
%                 case 0
%                     % The sender is not RAM infected. Do nothing.
% 
%                 case 1
%                     % The sender is RAM infected. Test Infection Rate, if success, then
%                     % infect receiver's RAM.
%                     if rand(1)<=param.IR
%                         network_k1(3, receiver_add) = 1;
%                     end
% 
%             end
% 
%             switch network(4, sender_add)
% 
%                 case 0
%                     % The sender is not ROM infected. Do nothing.
% 
%                 case 1
%                     % The sender is ROM infected. Test Infection Rate, if success, then
%                     % infect receiver's ROM.
%                     if rand(1)<=param.IR
%                         network_k1(4, receiver_add) = 1;
%                     end
% 
%             end
% 
%         end
% 
%     end
% end

%% While loop

for sender_add=1:param.n

% %% First step: Reporting
% 
%     if (network(3, sender_add) == 0)&&(network(4, sender_add) == 0)
%         % If the sender device IS NOT infected, we test the False Positive Rate
%         % of the detection system. In case it is a FP, the detection system erroneously reports
%         % an infection by adding a line in the report_infected stack. In case
%         % it don't get a FP, it reports a normal device adding a line in the
%         % report_normal stack.
%         if rand(1)<param.FPR
%             report_infected = [report_infected; [receiver_add, sender_add, network(3, sender_add), network(4, sender_add)]];
%         else
%             report_normal = [report_normal; [receiver_add, sender_add]];
%         end
% 
%     else
%         % If the sender device IS infected, we test the Detection Rate of the
%         % detection system. In case it is successfull, then the detection system reports an
%         % infection by adding a line in the report_infected stack. In case it
%         % FAILS, the detection system will report a NORMAL device in the report_normal
%         % stack.
%         if rand(1)<=param.DR
%             report_infected = [report_infected; [receiver_add, sender_add, network(3, sender_add), network(4, sender_add)]];
%         else
%             report_normal = [report_normal; [receiver_add, sender_add]];
%         end
% 
%     end

%     %% Second step: Getting infected

receiver_add = simultools.RenewReceiverGlobalClean(addressCleanSorted);

    if network(2, receiver_add) == 1    % If the receiver device is turned on, proceed to threat infection

        switch param.malware
            
            case 'MSM'
                switch network(3, sender_add)

                    case 0
                        % The sender is not RAM infected. Do nothing.

                    case 1
                        % The sender is RAM infected. Test Infection Rate, if success, then
                        % infect receiver's RAM.
                        if rand(1)<=param.IR
                            network_k1(3, receiver_add) = 1;
                        end

                end
                
            case 'ACM'

                switch network(4, sender_add)

                    case 0
                        % The sender is not ROM infected. Do nothing.

                    case 1
                        % The sender is ROM infected. Test Infection Rate, if success, then
                        % infect receiver's ROM.
                        if rand(1) <= param.IR
                            network_k1(4, receiver_add) = 1;
                        end

                end
                
        end

    end
end

end