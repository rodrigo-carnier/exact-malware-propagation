% PURPOSE OF THIS FUNCTION

function network_k1_infected = AttackSisOnlyClean(network, param)
% function [network_k1_infected, report_normal, report_infected] = AttemptInfection(network, report_normal, report_infected, sender_add, receiver_add, param)

% Initialize new matrix
network_k1_infected = network;

% Get Vector of Clean Devices
[addressCleanSorted, numberClean] = simultools.GetReceiverGlobalClean(network, param.malware);
% addressCleanSorted

[~, numberInfected] = simultools.GetSenderGlobalInfected(network, 'MSM');

infected = 0;

if numberClean >= numberInfected
    
    for dev_add=1:numberInfected
        if rand(1) <= param.IR
            if network_k1_infected(3, addressCleanSorted(dev_add)) == 0
                infected = infected + 1;
            end
            network_k1_infected(3, addressCleanSorted(dev_add)) = 1;
        end
    end
    
else
    
    
    for dev_add=1:numberClean
        if rand(1) <= param.IR
            infected = infected + 1;
            network_k1_infected(3, addressCleanSorted(dev_add)) = 1;
        end
    end
    
%     N = numberClean;
%     K = numberInfected - numberClean;
%     
%     for dev_add=1:N
%         if rand(1)<=param.IR
%             network_k1_infected(3, addressCleanSorted(dev_add)) = 1;
%         end
%     end
%     
%     for i=1:K
%         if rand(1)<=param.IR
%             network_k1_infected(3, addressCleanSorted(dev_add)) = 1;
%         end
%     end
    
end

infected
        
% for sender_add=1:param.n
%     
%     
% %     %% Reporting
% %     
% %     if (network(3, sender_add) == 0)&&(network(4, sender_add) == 0)
% %         % If the sender device IS NOT infected, we test the False Positive Rate
% %         % of the detection system. In case it is a FP, the detection system erroneously reports
% %         % an infection by adding a line in the report_infected stack. In case
% %         % it don't get a FP, it reports a normal device adding a line in the
% %         % report_normal stack.
% %         if rand(1) < param.FPR
% %             report_infected = [report_infected; [receiver_add, sender_add, network(3, sender_add), network(4, sender_add)]];
% %         else
% %             report_normal = [report_normal; [receiver_add, sender_add]];
% %         end
% % 
% %     else
% %         % If the sender device IS infected, we test the Detection Rate of the
% %         % detection system. In case it is successfull, then the detection system reports an
% %         % infection by adding a line in the report_infected stack. In case it
% %         % FAILS, the detection system will report a NORMAL device in the report_normal
% %         % stack.
% %         if rand(1) <= param.DR
% %             report_infected = [report_infected; [receiver_add, sender_add, network(3, sender_add), network(4, sender_add)]];
% %         else
% %             report_normal = [report_normal; [receiver_add, sender_add]];
% %         end
% % 
% %     end
%     
%     
%     %% Getting infected
% 
%     if (network(2,sender_add) == 1)     
% 
%         if ~isempty(addressCleanSorted)
% 
%             receiver_add = RenewReceiverGlobalClean(addressCleanSorted);
% 
%                     % The sender is RAM infected. Test Infection Rate, if success, then
%                     % infect receiver's RAM.
%                     if rand(1) <= param.IR
%                         network_k1_infected(3, receiver_add) = 1;
%                     end
% 
%         end
%         
%     end
%     
% end

end